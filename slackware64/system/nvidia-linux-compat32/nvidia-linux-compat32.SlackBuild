#!/bin/sh

# Heavily based on the Slackware 14.0 SlackBuild (v1)

# Written by Matteo Rossini ( zerouno @ slacky.it )
# Last build from Matteo Rossini ( zerouno @ slacky.it )

# Slackware build script for nvidia-linux-compat32
# Official Site: http://www.nvidia.com/Download/index.aspx

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e


# Basic information. 
PKGNAME=nvidia-linux-compat32
VERSION=${VERSION:-304.60}
BUILD=${BUILD:-1}
TAG=${TAG:-sl}
ARCH=${ARCH:-x86_64}
NARCH=x86
if [ $ARCH == "x86_64" ];then NARCH=x86_64;fi 
SOURCE="http://it.download.nvidia.com/XFree86/Linux-$ARCH/$VERSION/NVIDIA-Linux-$NARCH-$VERSION.run"
TAR=NVIDIA-Linux-$NARCH-$VERSION.run      # empty = auto
DIR=NVIDIA-Linux-$NARCH-$VERSION      # empty = auto
DOCS="README.txt LICENSE"
SLKFILES=""

# If EULA
if [ -e EULA.TXT ];then
  more EULA.TXT
  echo "Do you accept terms? (yes/[no])"
  read ACCEPT
  if [ "$ACCEPT" != "yes" ];then
    echo; echo "SlackBuild Aborted!!"
    exit 1
  fi
fi

# Does not touch following if not needed
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|)$//')}

if [ ! -e "$CWD/$TAR" ];then
  wget "$SOURCE" -O "$CWD/$TAR"
fi

CHOST="i486"
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  CHOST="x86_64"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
sh $CWD/$TAR -x
cd $DIR

chown -R root:root .
chmod -R u+w,go+r-w,a-s .

## Standard
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh

## Installation

# Install Libraries

  mkdir -p $PKG/usr/lib/vdpau
  install -m 755 \
      32/libGL.so.$VERSION \
      32/libOpenCL.so.1.0.0 \
      32/libcuda.so.$VERSION \
      32/libnvidia-compiler.so.$VERSION \
      32/libnvidia-glcore.so.$VERSION \
      32/libnvidia-ml.so.$VERSION \
      32/libnvidia-tls.so.$VERSION \
      32/libvdpau.so.$VERSION \
    $PKG/usr/lib
    cd $PKG/usr/lib
      ln -sf libGL.so.$VERSION libGL.so.1
      ln -sf libGL.so.1 libGL.so
      ln -sf libOpenCL.so.1.0.0 libOpenCL.so.1.0
      ln -sf libOpenCL.so.1.0 libOpenCL.so.1
      ln -sf libOpenCL.so.1 libOpenCL.so
      ln -sf libcuda.so.$VERSION libcuda.so.1
      ln -sf libcuda.so.1 libcuda.so
      ln -sf libnvidia-ml.so.$VERSION libnvidia-ml.so.1
      ln -sf libnvidia-ml.so.1 libnvidia-ml.so
      ln -sf libvdpau.so.$VERSION libvdpau.so.1
      ln -sf libvdpau.so.1 libvdpau.so
      ln -sf vdpau/libvdpau_nvidia.so.$VERSION libvdpau_nvidia.so
      ln -sf vdpau/libvdpau_trace.so.$VERSION libvdpau_trace.so 
    cd -

  install -m 755 \
      32/libvdpau_nvidia.so.$VERSION \
      32/libvdpau_trace.so.$VERSION \
    $PKG/usr/lib/vdpau
    cd $PKG/usr/lib/vdpau
      ln -sf libvdpau_nvidia.so.$VERSION libvdpau_nvidia.so.1
      ln -sf libvdpau_trace.so.$VERSION libvdpau_trace.so.1
    cd -

  install -D -m 644 32/libGL.la $PKG/usr/lib
  sed -i "s,__LIBGL_PATH__,/usr/lib," $PKG/usr/lib/libGL.la


# Documentation
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -r $DOCS $PKG/usr/doc/$PKGNAME-$VERSION
 
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz EULA.TXT $SLKFILES;do
  [ -e $SB ]&&cp -r $SB $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB
done

cd $PKG
chown -R root:root $PKG

/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION$C32-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}

if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP
fi
