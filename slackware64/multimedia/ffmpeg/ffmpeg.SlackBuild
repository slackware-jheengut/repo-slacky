#!/bin/sh

# Heavily based on the Slackware 14.0 SlackBuild

# Written by Loris Vincenzi ( http://www.slacky.eu )
# Last modified from 6c33c (seic33c [at] at gmail [dot] com )

# Slackware build script for ffmpeg
# Official Site: http://www.ffmpeg.org
# Patches from ...

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Required: celt, enca, faac, frei0r, lame, libaacplus, libass, libbluray, libdc1394
# Required: libgsm, libmodplug,  libnut (Static), libva, libdvpau, libvpx, libxavs (Static)
# Required: openal-soft, opencore-amr, openjpeg, opus, orc, rtmpdump
# Required: schroedinger, speex, twolame, utvideo (Static), vo-aacenc, vo-amrwbenc, 
# Required: x264, xvidcore

set -e

# Basic information.
PKGNAME=ffmpeg
VERSION=${VERSION:-1.2}
BUILD=${BUILD:-3}
TAG=${TAG:-sl}
ARCH=${ARCH:-x86_64}
SOURCE="http://www.ffmpeg.org/releases/$PKGNAME-$VERSION.tar.bz2"
TAR=      # empty = auto
DIR=      # empty = auto
DOCS="C* INSTALL LICENSE README RELEASE VERSION doc/*.html doc/*.txt"
SLKFILES=""

# If EULA
if [ -e EULA.TXT ];then
  more EULA.TXT
  echo "Do you accept terms? (yes/[no])"
  read ACCEPT
  if [ "$ACCEPT" != "yes" ];then
    echo; echo "SlackBuild Aborted!!"
    exit 1
  fi
fi

# Do not touch following if not needed
JOBS=${JOBS:--j2}
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

if [ ! -e $CWD/$TAR ];then
  wget $SOURCE -O "$CWD/$TAR"
fi

CHOST="i486"
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  CHOST="x86_64"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
tar xvf $CWD/$TAR
cd $DIR

chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Customize as you need
CPPFLAGS="-I/usr/include/vpx" \
LDFLAGS="$SLKLDFLAGS" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure --prefix=/usr \
--shlibdir=/usr/lib${LIBDIRSUFFIX} \
--libdir=/usr/lib${LIBDIRSUFFIX} \
--mandir=/usr/man \
--incdir=/usr/include \
--disable-static \
--enable-shared \
--enable-gnutls \
--enable-x11grab \
--enable-vaapi \
--enable-vdpau \
--enable-gpl \
--enable-version3 \
--enable-nonfree \
--enable-postproc \
--enable-swscale \
--enable-avfilter \
--enable-pthreads \
--enable-bzlib \
--enable-libcelt \
--enable-libcdio  \
--enable-frei0r \
--enable-libaacplus \
--enable-libass \
--enable-libbluray \
--enable-libcaca \
--enable-libopencore-amrnb \
--enable-libopencore-amrwb \
--enable-libopus \
--enable-libdc1394 \
--enable-libfaac \
--enable-libfreetype \
--enable-libgsm \
--enable-libmodplug \
--enable-libmp3lame  \
--enable-libnut \
--enable-librtmp \
--enable-libschroedinger \
--enable-libvpx \
--enable-libopenjpeg \
--enable-libspeex \
--enable-libtheora \
--enable-libtwolame \
--enable-libutvideo \
--enable-libv4l2 \
--enable-libvo-aacenc \
--enable-libvo-amrwbenc \
--enable-libvorbis \
--enable-libvpx \
--enable-libx264 \
--enable-memalign-hack \
--enable-libxavs \
--enable-libxvid \
--enable-openal \
--enable-openssl \
--enable-zlib \
--disable-debug \
--enable-vdpau \
--arch=${ARCH} 
echo -e "\E[0;32mPress any key to build the package!\E[0;0m"
read
make $JOBS
make tools/qt-faststart
make install DESTDIR=$PKG
install -D -m 0755 tools/qt-faststart $PKG/usr/bin/qt-faststart 

install -m 644 -p -D doc/ffserver.conf  $PKG/etc/ffserver.conf.new

# Documentation
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -r $DOCS $PKG/usr/doc/$PKGNAME-$VERSION

mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz EULA.TXT $SLKFILES;do
  [ -e $SB ]&&cp -r $SB $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB
done

if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -e $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
chown -R root:root $PKG

if [ -x "$(which requiredbuilder 2>/dev/null)" ];then
  ADD=$(ls /var/log/packages/ | sed -ne 's/\(frei0r\)-\([^-]\+-[^-]\+-[^-]\+\)/\1 >= \2/p') \
  requiredbuilder -y -v -s $CWD $PKG # add "-c -b" if you have binary files in /usr/share
  [ -e install/slack-required ]&&cat install/slack-required > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-required
fi

/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}

if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP
fi
