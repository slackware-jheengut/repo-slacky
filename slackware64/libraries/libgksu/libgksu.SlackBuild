#!/bin/sh
 
# Heavily based on the Slackware 14.0 SlackBuild
# Written by miklos < ardutu at gmail dot com >
# 
# Slackware build script for libgksu
# Official Site: http://www.nongnu.org/gksu/index.html
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Require:

set -e

# Basic information.
PKGNAME=libgksu
VERSION=${VERSION:-2.0.12}
BUILD=${BUILD:-1}
TAG=${TAG:-sl}
ARCH=${ARCH:-x86_64}
SOURCE="http://people.debian.org/~kov/gksu/${PKGNAME}-${VERSION}.tar.gz"
TAR=      # empty = auto
DIR=      # empty = auto
DOCS="ABOUT-NLS AUTHORS  COPYING  ChangeLog INSTALL"
SLKFILES="*.patch" # all files needed to the slackbuild (except slack-desc etc..)

# An EULA for non-free packages
if [ -e EULA.TXT ];then
  more EULA.TXT
  echo "Do you accept terms? (yes/[no])":
  read ACCEPT
  if [ "$ACCEPT" != "yes" ];then
    echo; echo "SlackBuild Aborted!!"
    exit 1
  fi
fi

# Does not touch following if not needed
JOBS=${JOBS:--j2}
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|)$//')}
 
if [ ! -e "$CWD/$TAR" ];then
  wget "$SOURCE" -O "$CWD/$TAR"
fi
 
CHOST="i486"
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  CHOST="x86_64"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
tar xvf $CWD/$TAR
cd $DIR
 
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Patches from gentoo.
patch -p1 < $CWD/libgksu-2.0.0-fbsd.patch
patch -p1 < $CWD/libgksu-2.0.7-libs.patch
patch -p1 < $CWD/libgksu-2.0.7-polinguas.patch
patch -p1 < $CWD/libgksu-2.0.12-revert-forkpty.patch
patch -p0 < $CWD/libgksu-2.0.12-fix-make-3.82.patch
patch -p1 < $CWD/libgksu-2.0.12-notests.patch
patch -p1 < $CWD/libgksu-2.0.12-automake-1.11.2.patch

touch NEWS README
libtoolize --force --copy --install
autoreconf

# Customize as you need
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --disable-schemas-install \
  --enable-shared \
  --disable-static \
  --disable-schemas-install \
  --with-gconf-source="xml::/etc/gconf/gconf.xml.defaults" \
  --build=$CHOST-slackware-linux
  
make $JOBS
make install DESTDIR=$PKG

# gconf stuff
export GCONF_CONFIG_SOURCE="xml::$PKG/etc/gconf/gconf.xml.defaults"
if [ -d $PKG/etc/gconf/schemas ]; then
	install -v -d -m755 $PKG/etc/gconf/gconf.xml.defaults
	SCHEMAS=$PKG/etc/gconf/schemas
	for schema in $SCHEMAS/*.schemas; do
		gconftool-2 --makefile-install-rule $schema
	done
	# Reset / Verify correct permissions
	( cd $PKG/etc/gconf ; find . -type d -exec chmod 755 {} \; )
	( cd $PKG/etc/gconf ; find . -type f -exec chmod 644 {} \; )
fi

rm -rf $PKG/etc/gconf/schemas

# Documentations
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
cp -r $DOCS $PKG/usr/doc/$PKGNAME-$VERSION
 
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz EULA.TXT $SLKFILES;do
  [ -e $SB ]&&cp -r $SB $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB
done

if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

# Strip binary files
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)


# Preparing to packaging
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -e $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
chown -R root:root $PKG
 
if [ -x "$(which requiredbuilder 2>/dev/null)" ];then
  requiredbuilder -y -v -s $CWD $PKG   # add "-c -b" if you have binary files in /usr/share 
  [ -e install/slack-required ]&&cat install/slack-required > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-required
fi

# Packaging
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
 
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP
fi
