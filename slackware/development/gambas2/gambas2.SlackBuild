#!/bin/sh
# Copyright Loris Vincenzi (http://www.slacky.eu)
# All rights reserved.
#
# Heavily based on the Slackware 14.0 SlackBuild
# http://gambas.sourceforge.net/
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Required: omniORB, postgresql, unixodbc
#
# Exit on most errors
set -e


# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=gambas2
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-2.24.0}
ARCH=${ARCH:-i486}
JOBS=${JOBS:--j2}
BUILD=${BUILD:-5}
TAG=${TAG:-sl}

SOURCE="http://prdownloads.sourceforge.net/gambas/$PKGNAME-$VERSION.tar.bz2"

# Download sorce tarball if still not present
if [ ! -e $PKGNAME-$VERSION.tar.bz2 ]; then
wget -c $SOURCE
fi

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"; CHOST="x86_64"
fi 

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT



# Decompress the source tarball
cd $TMP
tar xvjf $CWD/$PKGNAME-$VERSION.tar.bz2

echo -e "\E[0;32m+---------------------------+\E[0;0m"
echo -e "\E[0;32m| Start SlackBuild Gamabas2 |\E[0;0m"
echo -e "\E[0;32m+---------------------------+\E[0;0m"

# Adjust permissions and ownerships
cd $PKGNAME-$VERSION
chmod -R u+w,go+r-w,a-s .
chown -R root:root .

# Fix Poppler modules compilation
patch -p3 < $CWD/gambas-poppler-0.20.x.patch

./reconf-all
# Option to pass at the compilation process
LDFLAGS="$SLKLDFLAGS" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure 	--prefix=/usr \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--disable-static \
		--with-qt-dir=/opt/kde3/lib/qt3 \
		--with-qt-includes=/opt/kde3/lib/qt3/include \
		--with-qt-libraries=/opt/kde3/lib/qt3/lib \
		--with-extra-includes=/opt/kde3/include \
		--mandir=/usr/man \
		--program-prefix= \
		--program-suffix= \
		--build=$CHOST-slackware-linux
echo -e "\E[0;32mPress any key to build the package!\E[0;0m"
read
make $JOBS
make install DESTDIR=$PKG

#Add documentation files: readme, changelog and so on
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -a AUTHORS COPYING ChangeLog INSTALL NEWS README* $PKG/usr/doc/$PKGNAME-$VERSION
chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/*

# Building file menu desktop 
mkdir -p $PKG/usr/share/{applications,pixmaps}
cp $CWD/gambas2.png $PKG/usr/share/pixmaps
cp $CWD/gambas2.desktop $PKG/usr/share/applications


# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)



# Making Gambas2 runtime package
mkdir -p $PKG-runtime/usr/bin
mkdir -p $PKG-runtime/usr/lib/gambas2
mkdir -p $PKG-runtime/usr/share/gambas2
cp $PKG/usr/share/gambas2/info/* $PKG-runtime/usr/share/gambas2
cp $PKG/usr/lib/gambas2/* $PKG-runtime/usr/lib/gambas2
cp $PKG/usr/bin/gbi2 $PKG-runtime/usr/bin
cp $PKG/usr/bin/gbx2 $PKG-runtime/usr/bin
cp $PKG/usr/bin/gbr2 $PKG-runtime/usr/bin

mkdir -p $PKG/usr/doc/$PKGNAME-runtime-$VERSION/SlackBuild
cp -a AUTHORS COPYING ChangeLog INSTALL NEWS README* $PKG/usr/doc/$PKGNAME-runtime-$VERSION
chmod 644 $PKG/usr/doc/$PKGNAME-runtime-$VERSION/*


# Also add the slack-desk file and this slackbuild to the package
mkdir -p $PKG/install
mkdir -p $PKG-runtime/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/slack-desc-runtime > $PKG-runtime/install/slack-desc
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/slack-desc-runtime > $PKG/usr/doc/$PKGNAME-runtime-$VERSION/SlackBuild/slack-desc-runtime
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-runtime-$VERSION/SlackBuild/$PKGNAME.SlackBuild


# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-mime-database ]; then
  /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh


# Find and print dependencies into slack-required file
cd $PKG
chown -R root:root $PKG
if [ -x /usr/bin/requiredbuilder ];then
requiredbuilder -y -v -s  $CWD $PKG
fi
# Create txz package
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}


# Find and print dependencies for run-time package
cd $PKG-runtime
chown -R root:root $PKG
if [ -x /usr/bin/requiredbuilder ];then
requiredbuilder -y -v -s  $CWD $PKG
fi
# Create run-time package txz package
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-runtime-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}

# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi


