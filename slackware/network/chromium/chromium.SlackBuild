#!/bin/sh
# Heavily based on the Slackware 14.0 SlackBuild
# http://www.chromium.org/
# Packager Andrea Sciucca ( gohanz at infinito.it)
# http://www.slacky.eu
# Based on AUR script thanks to
# JerickoKru <jerichokru@verizon.net>
# Det <nimetonmaili at gmail a-dot com>
# Markus Golser <elmargol@googlemail.com>
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
#
# Exit on most errors
set -e


# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=chromium
TMP=${TMP:-/tmp/txz/$PKGNAME}
PKG=$TMP/package
VERSION=${VERSION:-24.0.1297.0}
ARCH=${ARCH:-i686} # i686 or x86_64
JOBS=${JOBS:--j2}
BUILD=${BUILD:-1}
TAG=${TAG:-sl}

SOURCE="http://commondatastorage.googleapis.com/chromium-browser-official/chromium-$VERSION.tar.bz2"

# Download sorce tarball if still not present
if [ ! -e $CWD/$PKGNAME-$VERSION.tar.bz2 ]; then
wget $SOURCE -O $PKGNAME-$VERSION.tar.bz2
fi


# Set compiling FLAGS
if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC -fno-ipa-cp"; SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"; CHOST="x86_64"
fi

# Create building directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT


# Decompress the source tarball
cd $TMP
tar xvf $CWD/$PKGNAME-$VERSION.tar.bz2

echo -e "\E[0;32m+---------------------------+\E[0;0m"
echo -e "\E[0;32m| Start SlackBuild Chromium |\E[0;0m"
echo -e "\E[0;32m+---------------------------+\E[0;0m"

# Adjust permissions and ownerships
cd $PKGNAME-$VERSION
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Disable PAM support
patch -p1 < $CWD/chromium-disable-pam.patch


# Building Chromium package

     build/gyp_chromium -f make build/all.gyp --depth=. \
    -Dgcc_version=47 \
    -Dno_strict_aliasing=1 \
    -Dwerror= \
    -Dlinux_sandbox_path=/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chromium_sandbox \
    -Dlinux_sandbox_chrome_path=/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chromium \
    -Dlinux_strip_binary=1 \
    -Drelease_extra_cflags="$SLKCFLAGS ${CFLAGS}" \
    -Dffmpeg_branding=Chrome \
    -Dproprietary_codecs=1 \
    -Duse_system_libjpeg=0 \
    -Duse_system_libxslt=0 \
    -Duse_system_libxml=0 \
    -Duse_system_speex=0 \
    -Duse_system_flac=0 \
    -Duse_system_libwebp=0 \
    -Duse_system_bzip2=0 \
    -Duse_system_zlib=0 \
    -Duse_system_libpng=0 \
    -Duse_system_ffmpeg=0 \
    -Duse_system_yasm=0 \
    -Duse_system_libevent=0 \
    -Dremove_webcore_debug_symbols=1 \
    -Duse_system_ssl=0 \
    -Duse_gnome_keyring=0 \
    -Dlinux_link_gnome_keyring=0 \
    -Djavascript_engine=v8 \
    -Ddisable_nacl=1 \
    -Duse_kerberos=0 \
    -Duse_gconf=0 \
    $([ "${ARCH}" == 'i686' ] && echo '-Ddisable_sse2=1')


### Building Chrome executable
CXXFLAGS="-include /usr/include/expat.h -include unistd.h" \
make $JOBS chrome chrome_sandbox chromedriver BUILDTYPE=Release



# Installing Chrome executable
install -m 0755 -D  out/Release/chrome $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chromium


# Installing Chrome-Sandbox
install -m 4755 -o root -g root -D out/Release/chrome_sandbox \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chromium_sandbox


# Installing Chrome-Driver
install -m 0755 -o root -g root -D out/Release/chromedriver \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chromiumdriver



# Installing Chrome data
install -m 0644 -D out/Release/chrome.pak \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chrome.pak



# Installing resources pak
install -m 0644 -D out/Release/resources.pak \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/resources.pak



# Installing content_resources pak
install -m 0644 -D out/Release/content_resources.pak \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/content_resources.pak



# Installing chrome_100_percent pak
install -m 0644 -D out/Release/chrome_100_percent.pak \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/chrome_100_percent.pak



# Installing Chrome FFmpeg library
install -m 0755 -D out/Release/libffmpegsumo.so \
     $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/libffmpegsumo.so


# Installing localization and resources files
cp -a out/Release/locales  out/Release/resources \
    $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/


# Create themes directory
mkdir -p  $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/themes

# Cleaning package
find $PKG/usr/lib${LIBDIRSUFFIX}/$PKGNAME/ -name '*.d' -type f -delete



# Installing manpage
install -m 0644 -D out/Release/chrome.1 \
    $PKG/usr/man/man1/$PKGNAME.1


# Installing desktop menu file
install -m 0644 -D $CWD/chromium.desktop \
    $PKG/usr/share/applications/chromium.desktop


# Installing icons directory
cd chrome/app/theme/chromium/
for res in 22 24 48 64 128 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -m0644 product_logo_${res}.png \
                 ${dir}/${PKGNAME}.png
done
cd - 

# Linking Chrome executable on default path 
mkdir -p $PKG/usr/bin
cd $PKG
  ln -s /usr/lib${LIBDIRSUFFIX}/chromium/chromium $PKG/usr/bin/chromium
cd -



# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)


#Add documentation files: readme, changelog and so on
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -a AUTHORS DEPS LICENSE WATCHLISTS \
$PKG/usr/doc/$PKGNAME-$VERSION
chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/*



# Also add the slack-desk file and this slackbuild to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild



# Compress the man pages if present
if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi


# Building some post-install execution script 	
# Fix Setuid permission for chromium_sandbox after package installation
       echo "if [ -x /usr/lib${LIBDIRSUFFIX}/chromium/chromium_sandbox ]; then
  chmod 4755 /usr/lib${LIBDIRSUFFIX}/chromium/chromium_sandbox
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/update-mime-database ]; then
  /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor 1> /dev/null 2> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh




# Find and print dependencies into slack-required file
cd $PKG
chown -R root:root $PKG
if [ -x /usr/bin/requiredbuilder ];then
requiredbuilder -y -v -b -s  $CWD $PKG
fi
# Create txz package
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}


# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi


